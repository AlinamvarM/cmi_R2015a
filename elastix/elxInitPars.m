% Function to initialize Elastix parameter structure to defaults
function s = elxInitPars(varargin)
% s = elxInitPars(RefDims,RefVoxSz,HomDims,HomVoxSz,Ttype,'Name',Value)
% Inputs:
%   RefDims = [1x3] fixed image matrix dimensions
%   RefVoxSz = [1x3] fixed image voxel dimensions
%   HomDims = [1x3] moving image matrix dimensions
%   HomVoxSz = [1x3] moving image voxel dimensions
%   Ttype = Transformation type (Translation,Euler,Similarity,Affine,BSpline)
%   (Optional) Name/Value pairs:
%       

Ttypes = {'Translation','Euler','Similarity','Affine','BSpline'};
Otypes = {'StandardGradientDescent','AdaptiveStochasticGradientDescent'};
Stypes = {'Full','RandomCoordinate','RandomSparseMask'};

% Parse inputs:
p = inputParser;
addRequired(p,'RefDims',@(x)isnumeric(x)&&(length(x)==3));
addRequired(p,'RefVoxSz',@(x)isnumeric(x)&&(length(x)==3));
addRequired(p,'HomDims',@(x)isnumeric(x)&&(length(x)==3));
addRequired(p,'HomVoxSz',@(x)isnumeric(x)&&(length(x)==3));
addRequired(p,'Transform',@(x)ismember(x,Ttypes));
addParamValue(p,'Optimizer','StandardGradientDescent',@(x)ismember(x,Otypes));
addParamValue(p,'Sampler','RandomSparseMask',@(x)ismember(x,Stypes));
parse(p,varargin{:});

% Determine number of resolutions:
nres = floor(log2(max([ref_dims,hom_dims])))-4;

% Calculate image downsample pyramids:
fips = max(round(repmat(ref_dims',1,nres)*diag(1./(2.^((1:nres)+4)))),1);
mips = max(round(repmat(hom_dims',1,nres)*diag(1./(2.^((1:nres)+4)))),1);

% Set clinical/mouse settings:
if clinchk % Human data
    BEwt = 40;
    SP_a = round(sqrt(mips(1,:).*mips(end,:))*5000);
else
    BEwt = 0.1;
    SP_a = 20;
end

s = struct('ImageTypes',...
              struct('FixedInternalImagePixelType', 'float',...
                     'FixedImageDimension',         3,...
                     'MovingInternalImagePixelType','float',...
                     'MovingImagedimension',        3,...
                     'UseDirectionCosines',         'false',...
                     'ResultImageFormat',           'mhd'),...
           'Outputs',...
              struct('WriteTransformParametersEachIteration',   'false',...
                     'WriteTransformParametersEachResolution',  'false',...
                     'WriteResultImageAfterEachResolution',     'false',...
                     'WriteResultImage',                        'true',...
                     'ShowExactMetricValue',                    'false',...
                     'ErodeFixedMask',                          'false'),...
           'Pyramid',...
              struct('NumberOfResolutions',nres,...
                     'FixedImagePyramid','FixedSmoothingImagePyramid',...
                     'FixedImagePyramidSchedule',fips(:)',...
                     'MovingImagePyramid','MovingSmoothingImagePyramid',...
                     'MovingImagePyramidSchedule',mips(:)'),...
           'Registration',...
              struct('Registration','MultiMetricMultiResolutionRegistration'),...
           'Metric',...
              struct('Metric',{{'AdvancedMattesMutualInformation','TransformBendingEnergyPenalty'}},...
                     'UseFastAndLowMemoryVersion','false',...
                     'UseJacobianPreconditioning','true',...
                     'FiniteDifferenceDerivative','false',...
                     'NumberOfHistogramBins',32,...
                     'NumberOfFixedHistogramBins',32,...
                     'NumberOfMovingHistogramBins',32,...
                     'FixedLimitRangeRatio',0,...
                     'MovingLimitRangeRatio',0,...
                     'FixedKernelBSplineOrder',1,...
                     'MovingKernelBSplineOrder',3,...
                     'UseRelativeWeights','false',...
                     'Metric0Weight',1,...
                     'Metric1Weight',BEwt),...
           'Optimizer',...
              struct('Optimizer','StandardGradientDescent',...
                     'MaximumNumberOfIterations',1000,...
                     'MaximumNumberOfSamplingAttempts',0,...
                     'SP_a',SP_a,...
                     'SP_alpha',0.602,...
                     'SP_A',50),...
           'InterpolatorResampler',...
              struct('Interpolator','LinearInterpolator',... % Interp during optim (Linear faster than 1st-order BSpline)
                     'ResampleInterpolator','FinalBSplineInterpolator',... % Final interpolator after optimization
                     'FinalBSplineInterpolationOrder',3,...
                     'Resampler','DefaultResampler'),...
           'ImageSampler',...
              struct('CheckNumberOfSamples','true',...
                     'ImageSampler','RandomSparseMask',...
                     'NumberOfSpatialSamples',10000,...
                     'NewSamplesEveryIteration','true',...
                     'UseRandomSampleRegion','false'),...
           'Transform',...
              struct('AutomaticTransformInitialization','false',...
                     'AutomaticScalesEstimation','false',...
                     'HowToCombineTransforms','Compose'));

% Transform parameters:
switch p.Results.Transform
    
    case 'Translation'
        s.Transform.Transform = 'TranslationTransform';
        s.Transform.Scales = [1 1 1];
        % [ tx ty tz ]
    case 'Euler'
        s.Transform.Transform = 'TranslationTransform';
        s.Transform.Scales = [1000 1000 1000 1 1 1];
        % [ rx ry rz tx ty tz ]
    case 'Similarity'
        s.Transform.Transform = 'TranslationTransform';
        s.Transform.Scales = [1000*ones(1,3) 1 1 1 1];
        % [ q1 q2 q3 tx ty tz s ]
    case 'Affine'
        s.Transform.Transform = 'TranslationTransform';
        s.Transform.Scales = [1000*ones(9) 1 1 1];
        % [ a11 a12 a13 a21 a22 a23 a31 a32 a33 tx ty tz ]
    case 'BSpline'
        
        % Calculate grid spacing for b-splines
        grid_finsp = max(round(hom_dims/100),2); % In voxels
        grid_max = round(hom_dims./(10*grid_finsp));
        grid_sched = max(round(repmat(grid_max',1,nres)*diag(linspace(1,1/max(grid_max),nres))),1);
        
        s.Transform.Transform = 'BSplineTransform';
        s.Transform.UseCyclicTransform = 'false';
        s.Transform.FinalGridSpacingInVoxels = grid_finsp;
        s.Transform.GridSpacingSchedule = grid_sched(:)';
        s.Transform.BSplineTransformSplineOrder = 3;
end

% Optimizer parameters:
s.Optimizer.Optimizer = p.Results.Optimizer;
switch p.Results.Optimizer
    case 'StandardGradientDescent'
    case 'AdaptiveStochasticGradientDescent'
        s.Optimizer.NumberOfSamplesForSelfHessian = 100000;
        s.Optimizer.NumberOfGradientMeasurements = 0;
        s.Optimizer.NumberOfJacobianMeasurements = 2700;
        s.Optimizer.NumberOfSamplesForExactGradient = 100000;
end

% Sampler parameters:
s.ImageSampler.ImageSampler = p.Results.Sampler;
if any(strcmp(p.Results.Sampler,{'Random','RandomCoordinate','RandomSparseMask'}))
    s.ImageSampler.NumberOfSpatialSamples = 2000;
    if strcmp(p.Results.Sampler,'RandomCoordinate')
        s.ImageSampler.UseRandomSampleRegion = 'false';
        s.ImageSampler.FixedImageBSplineInterpolationOrder = 1;
    end
end

% Any other inputs:


