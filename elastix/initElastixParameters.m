function s = initElastixParameters(str)
% Initialize structure of parameters used for Elastix coregistration
s = [];
if (nargin==0) || any(strcmpi(str,{'affine','translation','similarity','euler','warp'}))
    s = struct(...
            'FixedInternalImagePixelType', 'float',...                          % Data & I/O options:
                'FixedImageDimension',          3     ,...
                'MovingInternalImagePixelType','float',...
                'MovingImagedimension',         3     ,...
                'UseDirectionCosines',         'false',...
                'ResultImageFormat',           'mhd'  ,...
                'WriteTransformParametersEachIteration', 'false',...
                'WriteTransformParametersEachResolution','true',...
                'WriteResultImageAfterEachResolution',   'false',...
                'WriteResultImage',                      'true',...
            'Registration',         'MultiResolutionRegistration',...           % Registration Options
            'Metric',               'AdvancedMattesMutualInformation',...       % Metric Options
                'UseJacobianPreconditioning',   'false',...
                'FiniteDifferenceDerivative',   'false',...
                'ShowExactMetricValue',         'false',...
                'UseFastAndLowMemoryVersion',   'false',...
                'NumberOfHistogramBins',        32,...
                'NumberOfFixedHistogramBins',   32,...
                'NumberOfMovingHistogramBins',  32,...
                'FixedLimitRangeRatio',         0,...
                'MovingLimitRangeRatio',        0,...
                'FixedKernelBSplineOrder',      1,...
                'MovingKernelBSplineOrder',     3,...
            'ImageSampler',    'RandomSparseMask',...  
                'NumberOfSpatialSamples',[2000,5000,5000,5000],...
                'NewSamplesEveryIteration', 'true',...
                'UseRandomSampleRegion',    'false',...
                'CheckNumberOfSamples',     'true',...
            'Interpolator',                      'LinearInterpolator',...   % Interpolator/Resampler Options
                'ResampleInterpolator',          'FinalBSplineInterpolator',...
                'FinalBSplineInterpolationOrder',3,...
                'Resampler',                     'DefaultResampler',...
                'ErodeFixedMask',                'false',...
                'ErodeMovingMask',               'false',...
                'DefaultPixelValue',             0,...
            'Transform',            'AffineTransform',...                       % Transform Options
                'AutomaticTransformInitialization','false',...
                'AutomaticScalesEstimation','true',...
                'HowToCombineTransforms','Compose',...
            'Optimizer',            'StandardGradientDescent',...               % Optimizer Options
                'NumberOfSamplesForSelfHessian',100000,...
                'NumberOfGradientMeasurements',0,...
                'NumberOfJacobianMeasurements',2700,...
                'NumberOfSamplesForExactGradient',100000,...
                'MaximumNumberOfIterations',[2000,2000,1000,1000],...
                'MaximumNumberOfSamplingAttempts',0,...
                'SP_a',[200,50,20,10],...
                'SP_alpha',0.602,...
                'SP_A',[50,50,50,50],...
            'NumberOfResolutions',  4,...                                       % Pyramid Options
                'FixedImagePyramid',    'FixedSmoothingImagePyramid',...
                'FixedImagePyramidSchedule',[8,8,8,4,4,4,2,2,2,1,1,1],...
                'MovingImagePyramid',   'MovingSmoothingImagePyramid',...
                'MovingImagePyramidSchedule',[8,8,8,4,4,4,2,2,2,1,1,1]);
        
    if nargin
        switch lower(str)
            case 'translation'
                s.Transform = 'TranslationTransform';
                s.Scales = [1,1,1];
            case 'euler'
                s.Transform = 'EulerTransform';
                s.Scales = [10000,10000,10000,1,1,1];
            case 'similarity'
                s.Transform = 'SimilarityTransform';
                s.Scales = [10000,10000,10000,1,1,1,1000];
            case 'affine'
                s.Scales = ones(1,12);
            case 'warp'
                s.Transform = 'BSplineTransform';
                s.Registration = 'MultiMetricMultiResolutionRegistration';
                s.Metric = {'AdvancedMattesMutualInformation',...
                            'TransformBendingEnergyPenalty'};
                s.UseRelativeWeights = 'false';
                s.Metric0Weight = 1;
                s.Metric1Weight = 50;
                s.FinalGridSpacingInVoxels = [5,5,5];
                s.GridSpacingSchedule = [8 8 8 4 4 4 2 2 2 1 1 1];
                s.BSplineTransforms = 'Compose';
                s.BSplineTransformSplineOrder = 3;
                s.UseCyclicTransform = 'false';
        end
    end
else
    error('Invalid tranform input.');
end