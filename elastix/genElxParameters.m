% Generate Elastix Parameter file for image coregistration
function fname = genElxParameters(varargin)

% Define options for inputs:
regTypes = {'MultiResolutionRegistration'};
metricTypes = {'AdvancedMattesMutualInformation'};
sampTypes = {'RandomCoordinate'};
interpTypes = {'LinearInterpolator'};
resampinterpTypes = {'FinalBSplineInterpolator'};
resampTypes = {'DefaultResampler'};
transformTypes = {};
optimTypes = {'AdaptiveStochasticGradientDescent'};
fimgpyrTypes = {'FixedSmoothingImagePyramid'};
mimgpyrTypes = {'MovingSmoothingImagePyramid'};

% Create input parser for registration options:
% Required (defaults are first cell of above definitions):
p = inputParser;
addParameter(p,'Registration',...
    regTypes{1},...
    @(x) any(validatestring(x,regTypes)));
addParameter(p,'Metric',...
    metricTypes{1},...
    @(x) any(validatestring(x,metricTypes)));
addParameter(p,'Sampler',...
    sampTypes{1},...
    @(x) any(validatestring(x,sampTypes)));
addParameter(p,'Interpolator',...
    interpTypes{1},...
    @(x) any(validatestring(x,interpTypes)));
addParameter(p,'ResampleInterpolator',...
    resampinterpTypes{1},...
    @(x) any(validatestring(x,resampinterpTypes)));
addParameter(p,'Resampler',...
    resampTypes{1},...
    @(x) any(validatestring(x,resampTypes)));
addParameter(p,'Transform',...
    transformTypes{1},...
    @(x) any(validatestring(x,transformTypes)));
addParameter(p,'Optimizer',...
    optimTypes{1},...
    @(x) any(validatestring(x,optimTypes)));
addParameter(p,'FixedImagePyramid',...
    fimgpyrTypes{1},...
    @(x) any(validatestring(x,fimgpyrTypes)));
addParameter(p,'MovingImagePyramid',...
    mimgpyrTypes{1},...
    @(x) any(validatestring(x,mimgpyrTypes)));
% Ooptional
addRequired(p,'Resampler',@(x) any(validatestring(x,regTypes)));
addRequired(p,'Resampler',@(x) any(validatestring(x,regTypes)));
addRequired(p,'Resampler',@(x) any(validatestring(x,regTypes)));
addRequired(p,'Resampler',@(x) any(validatestring(x,regTypes)));