% Function to initialize Elastix parameter structure to defaults
function s = initElxParStruct(refdims,homdims,clinchk,varargin)

p = inputParser;
p.CaseSensitive = true;
p.KeepUnmatched = true;
addParamValue(p,'SP_a',[],@isnumeric);
addParamValue(p,'SP_A',[],@isnumeric);
addParamValue(p,'Iterations',[],@isnumeric);
addParamValue(p,'FixedPyramid',[],@isvector);
addParamValue(p,'MovingPyramid',[],@isvector);
parse(p,varargin{:});

% Determine number of resolutions:
cdiff = setdiff({'FixedPyramid','MovingPyramid','SP_a'},p.UsingDefaults);
if isempty(cdiff) % no resolution-setting inputs, so automatically calculate
    nres = floor(log2(max([refdims,homdims])))-4;
else
    nres = cellfun(@(x)length(p.Results.(x)),cdiff) ...
        ./ (2*ismember(cdiff,{'FixedPyramid','MovingPyramid'})+1);
    if ~all(nres==max(nres))
        warning('Number of resolutions for inputs parameters does not match!');
    end
    nres = max(nres);
end

% Calculate image downsample pyramids:
if isempty(p.Results.FixedPyramid)
    fips = max(round(repmat(refdims',1,nres)*diag(1./(2.^((1:nres)+4)))),1);
else
    fips = ones(1,3*nres);
    fips(1:length(p.Results.FixedPyramid)) = p.Results.FixedPyramid;
end
if isempty(p.Results.MovingPyramid)
    mips = max(round(repmat(homdims',1,nres)*diag(1./(2.^((1:nres)+4)))),1);
else
    mips = ones(1,3*nres);
    mips(1:length(p.Results.MovingPyramid)) = p.Results.MovingPyramid;
end

% Calculate grid spacing for b-splines
grid_finsp = max(round(homdims/100),2); % In voxels
grid_max = round(homdims./(10*grid_finsp));
grid_sched = max(round(repmat(grid_max',1,nres)*diag(linspace(1,1/max(grid_max),nres))),1);

% Set clinical/mouse settings:
if clinchk % Human data
    BEwt = 40;
    afact = 5000;
else
    BEwt = 0.1;
    afact = 5;
end

% Set step size function
if isempty(p.Results.SP_a)
    SP_a = round(sqrt(mips(1,:).*mips(end,:))*afact);
else
    SP_a = ones(1,nres);
    SP_a(1:length(p.Results.SP_a)) = p.Results.SP_a;
end

% Set number of optimization iterations
if isempty(p.Results.Iterations)
    iter = 1000;
else
    iter = p.Results.Iterations(end)*ones(1,nres);
    iter(1:length(p.Results.Iterations)) = p.Results.Iterations;
end

s = struct('ImageTypes',...
              struct('FixedInternalImagePixelType', 'float',...
                     'FixedImageDimension',         3,...
                     'MovingInternalImagePixelType','float',...
                     'MovingImagedimension',        3,...
                     'UseDirectionCosines',         'false',...
                     'ResultImageFormat',           'mhd'),...
           'Outputs',...
              struct('WriteTransformParametersEachIteration','false',...
                     'WriteTransformParametersEachResolution','false',...
                     'WriteResultImageAfterEachResolution','false',...
                     'WriteResultImage','true',...
                     'ShowExactMetricValue','false',...
                     'ErodeFixedMask','false',...
                     'ErodeMovingMask','false'),...
           'Pyramid',...
              struct('NumberOfResolutions',nres,...
                     'FixedImagePyramid','FixedSmoothingImagePyramid',...
                     'FixedImagePyramidSchedule',fips(:)',...
                     'MovingImagePyramid','MovingSmoothingImagePyramid',...
                     'MovingImagePyramidSchedule',mips(:)'),...
           'Registration',...
              struct('Registration','MultiMetricMultiResolutionRegistration'),...
           'Metric',...
              struct('Metric',{{'AdvancedMattesMutualInformation','TransformBendingEnergyPenalty'}},...
                     'UseFastAndLowMemoryVersion','false',...
                     'UseJacobianPreconditioning','true',...
                     'FiniteDifferenceDerivative','false',...
                     'NumberOfHistogramBins',32,...
                     'NumberOfFixedHistogramBins',32,...
                     'NumberOfMovingHistogramBins',32,...
                     'FixedLimitRangeRatio',0,...
                     'MovingLimitRangeRatio',0,...
                     'FixedKernelBSplineOrder',1,...
                     'MovingKernelBSplineOrder',3,...
                     'UseRelativeWeights','false',...
                     'Metric0Weight',1,...
                     'Metric1Weight',BEwt),...
           'Optimizer',...
              struct('Optimizer','StandardGradientDescent',...
                     'NumberOfSamplesForSelfHessian',100000,...
                     'NumberOfGradientMeasurements',0,...
                     'NumberOfJacobianMeasurements',2700,...
                     'NumberOfSamplesForExactGradient',100000,...
                     'MaximumNumberOfIterations',iter,...
                     'MaximumNumberOfSamplingAttempts',0,...
                     'SP_a',SP_a,...
                     'SP_alpha',0.602,...
                     'SP_A',50),...
           'InterpolatorResampler',...
              struct('Interpolator','LinearInterpolator',... % Interp during optim (Linear faster than 1st-order BSpline)
                     'ResampleInterpolator','FinalBSplineInterpolator',... % Final interpolator after optimization
                     'FinalBSplineInterpolationOrder',3,...
                     'Resampler','DefaultResampler'),...
           'ImageSampler',...
              struct('CheckNumberOfSamples','true',...
                     'ImageSampler','RandomSparseMask',...
                     'NumberOfSpatialSamples',[300,2000,5000,5000,5000],...
                     'NewSamplesEveryIteration','true',...
                     'UseRandomSampleRegion','false'),...
           'Transform',...
              struct('Transform','BSplineTransform',...
                     'AutomaticTransformInitialization','false',...
                     'AutomaticScalesEstimation','true',...
                     'FinalGridSpacingInVoxels',grid_finsp,...
                     'GridSpacingSchedule',grid_sched(:)',...
                     'HowToCombineTransforms','Compose',...
                     'BSplineTransformSplineOrder',3,...
                     'UseCyclicTransform','false'));

