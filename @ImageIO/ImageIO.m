classdef ImageIO < handle
    %ImageLoader
    %   Detailed explanation goes here
    
    properties
        wdir = ''; % Working directory for image files
        lasttype = 0;
        types = struct('name',{'Analyze',...
                               'MetaIO',...
                               'AVS',...
                               'FDF',...
                               'VFF',...
                               'DICOM',...
                               'NifTi',...
                               'Bruker',...
                               'MRSolutions',...
                               'Mask',...
                               'TIFF',...
                               'JPEG',...
                               'Matlab',...
                               'FID'},...
                       'ext',{{'.hdr','.img'},...
                              {'.mhd','.raw'},...
                              {'.fld'},...
                              {'.fdf'},...
                              {'.vff'},...
                              {'.dcm','.1',''},...
                              {'.nii'},...
                              {'.log'},...
                              {'.sur','.mrd'},...
                              {'.mask'},...
                              {'.tif'},...
                              {'.jpg'},...
                              {'.mat'},...
                              {'.fid'}},...
                       'func',{{@readANALYZE,   @saveANALYZE},...
                               {@readMHD,       @saveMHD},...
                               {@readFLD,       @saveFLD},...
                               {@readFDF,       []},...
                               {@readVFF,       @saveVFF},...
                               {@readDICOM,     @saveDICOM},...
                               {@readNIFTI,     @saveNIFTI},...
                               {@readBruker,    []},...
                               {@readMRS,       []},...
                               {@readMask,      @saveMask},...
                               {@readTIFF,      @saveTIFF},...
                               {@readJPG,       @saveJPG},...
                               {@readMAT,       @saveMAT},...
                               {@readFID,       []}},...
                       'enable',{true});
        definfo = struct('Institution',{'University of Michigan CMI'},...
                         'Manufacturer',{'Matlab'},...
                         'Model',{''},...
                         'FieldStrength',{[]},...
                         'StationName',{''},...
                         'SerialNo',{[]},...
                         'SoftwareVer',{version},...
                         'Comment',{''},...
                         'Modality',{''},...
                         'StudyDescription',{''},...
                         'SeriesDescription',{''},...
                         'ImageType',{''},...
                         'Dim',{ones(1,4)},...
                         'Label',{''},...
                         'VoxelSpacing',{ones(1,3)},...
                         'VoxelSize',{ones(1,3)},...
                         'Origin',{zeros(1,3)},... Location of first element
                         'Orientation',{eye(3)},... direction cosines
                         'AnatomicalOrientation',{'RAI'});
        gui = false; % Determines whether to ask for user input
    end
    
    methods
        function self = ImageIO(TF)
            self.wdir = pwd;
            if (nargin==1) && islogical(TF)
                self.gui = TF;
            end
            if ispc
                str = 'COMPUTERNAME';
            else      
                str = 'HOSTNAME';      
            end
            self.definfo.StationName = getenv(str);
        end
        
        % Get function handle for read(0)/write(1)
        function [func,ind] = getFunc(self,fname,flag)
            if nargin<3
                flag = 0;
            end
            [~,~,ext] = fileparts(fname);
            ind = find(cellfun(@(x)any(ismember(lower(ext),x)),{self.types(:).ext}),1);
            func = self.types(ind).func{flag+1};
        end
        
        % Use GUI:
        function useGUI(self,TF)
            if (nargin==2) && islogical(TF)
                self.gui = TF;
            end
        end
        
        % Return filename filter:
        function filt = getFilt(self,ind)
        % ind==0 refers to a filter for All Files
            if (nargin<2)
                ind = [0,find([self.types(:).enable])];
            elseif ~all(ismember(ind,0:length(self.types)))
                error('Input filter index out of range.');
            end
        % Don't allow repetition
            ind = unique(ind);
        % Build the filter cell array:
            filt = cell(length(ind),2);
            i = ind==0;
            filt(~i,:) = [{self.types(ind(~i)).name}',...
                cellfun(@(x)sprintf('*%s;',x{:}),{self.types(ind(~i)).ext}',...
                        'UniformOutput',false)];
            filt(i,:) = {'*','All Files'};
        % Put last-loaded filter on top:
            i = ind==self.lasttype;
            if any(i)
                filt = [filt(i,:);filt(~i,:)];
            end
        end
        
        % Set last image format
        function setLast(self,ind)
            if (nargin==2) && isscalar(ind) && ismember(ind,0:length(self.types))
                self.lasttype = ind;
            end
        end
        
        % Set Enable property for filter types:
        function enableType(self,ind,TF)
            if nargin==0
                % Enable all
                for i = 1:length(self.types)
                    self.types(i).enable = true;
                end
            elseif isnumeric(ind) && all(ismember(ind,1:length(self.types)))...
                    && islogicla(TF) && (length(ind)==length(TF))
                for i = 1:length(ind)
                    self.types(i).enable = TF(i);
                end
            end
        end
        
        % Return index of extension type:
        function ind = getFiltInd(self,ext)
            % Returns NaN if ext is not a valid type
            ind = [];
            if ischar(ext)
                ext = cellstr(ext);
            end
            if iscellstr(ext)
                ext = lower(ext);
                ind = cellfun(@(x)find(cellfun(@(y)ismember(x,y),...
                            {self.types(:).ext})),ext,'UniformOutput',false);
                ind{cellfun(@isempty,ind)} = nan;
                ind = [ind{:}]';
            end
        end
        
    end
    
end

