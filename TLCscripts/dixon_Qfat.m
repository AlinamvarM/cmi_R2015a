function dixon_Qfat(browz)
% dixon_fat reads-in Water & Fat images generated by 3pt (or 4pt) Dixon
% method, saves "water only", "fat only", "%Fat" and "operator-corrected
% %Fat".  The phase unwrap algo occasionally fails, in which case the
% operator may choose to swap the water and fat assignments over the entire
% slice (thus the "op-cor %fat".  Note, islands of missassignment within the given
% slice will still be incorrect.
% Script designed for 3pt or 4pt Dixon images produced on the Philips
% scanners - which creates the pure fat and pure water images only.
% TLChenevert 8/14/2008
% TLChenevert 12/27/2010.  dixon_fat"2".  Changes to also save OP & IP in
% fld.  This is done to illustrate advantages over simple T1-weighting for
% fat segmentation as desired by Dr. Hurvitz.
% TLChenevert 9/28/2011.  Generic binary output for data exchange with others.
% TLChenevert 20141110.  Start to use "imgtype" from DICOM to identify
% which images are W,F,OP,IP.
% TLC 20150303: Designed ONLY FOR PHILIPS Quantitative mDixon (ver 5.1.7).
%               Use:     x = readdicom7(0,1,'dv');
%                        ityp = getsafield(x,'imgtyp');
%                           ityp = 8  = "Water-only"
%                           ityp = 11 = "Fat-only"
%                           ityp = 18 = "T2_STAR" (in ms)
%                           ityp = 17 = "Fat Fraction" (in percent; though
%                           can have pixels = -100 (out-of-FOV) and >100 to 200 (artifact).
% TLC 20150327:  Fixed bug when there are more than W-only, F-only, FF and T2_Star (eg, IP, OP).
% TLC 20150804:  Change to create MHDs instead of NIFTIs.  Continue to make
%                AVS fields for consistency with ongoing NASH studies.


global fname dtes examID lastdcdir; % This is so I can label images with appropriate filenames.

if (nargin == 0)       % No input arguments, assign defaults
    browz=0; % Assign browse starting point dicom directory
end % if nargin
maxscale = 20000;  % Stored highest pixel value of water-only and fat-only = maxscale

% Niftis and MHDs stay in DV scaling!!! PctFat of subcutaneous fat should
% be around 85 to 95.  T2star normal liver around 15 to 25.
% To be consistent with prior AVS flds related to fat% and T2*:
fatscale = 1;   % SCALING FOR AVS ONLY!!! Assume read as 'dv', thus 20% fat stored as fatscale x 20 = 1x20 = 20. Max dv pixel around 200, thus max stored = 200.
t2sscale = 10;  % SCALING FOR AVS ONLY!!! Assume read as 'dv', thus 20ms stored as t2sscale x 20 = 10x20 = 200. Max dv pixel around 100, thus max stored = 1000.
% *********************************************
% **** INDICATE SCRIPT AND REV NUMBER HERE ****
% *********************************************
scriptname = 'dixon_Qfat'
revN = '_rev1';
recon_script = [scriptname revN];
subsample = 0;
fpdv = 'dv'; % Recon happened on scanner; makes Water-only, fat-only, T2*, and FatFraction. Supposedly multi-peak and T2*-corrected
save_mat = 'y';

save_avs = 'y'; % Create AVS fields?
save_nifti = 'n'; % Create NIFTIs?
save_mhd = 'y'; % Create MHDs?
make_exam_folder = 'n'; % Create e##### folder.

% *********************************************

%fpdv = 'dv';    % 'fp' is default, but if you want to maintain quantitative display values created by scanner, then 'dv'
if (fpdv == 'dv')
    scaleall = 'n'; % Do not rescale to 15k.  Keep quantitative display value setup by scanner.
    disp('************************************************************');
    disp('NOTE, pixels as displayed on scanner.  Needed for Q mDixon!');
    disp('************************************************************');
else
    scaleall = 'y'; % 'y' scales max pixel to 15000, otherwise no scale adjustments
    disp('*************************************************');
    disp('******** NOTE, scaling pixels to 15k! ***********');
    disp('*************************************************');
end % if fpdv

% ************************************
% ************************************

if (subsample == 1)
    disp('JUST A WARNING --- YOU HAVE PIXEL AVERAGING ON.')
end

% For assigning output filenames:
disp('Run Script from within Subject ID Directory. ');
disp('FYI Current directory is ... ');
locdir = pwd
%subjid = input('Unique ID for this Subject (eg. vol001) ? ','s');

subjid0 = input('Subject ID (eg 1081) for this Subject? ','s');
subjid1 = input('Timepoint ID (eg. 00, 10, 20, ...) for this Exam? ','s');
subjid = [subjid0 '_' subjid1];


disp(' ');
disp('Select Desired Q Dixon Series ... '); % This defines input filename.

%[x,dim1, dim2, dim3, dim4, fov1, fov2, fov3, fov4, tr] = readdicom5(0,browz,fpdv,subsample);
[z,dim1,dim2,dim3,dim4,fov1,fov2,fov3,fov4,tr,unique_te,ppd,flip,di1,nifti_params] = readdicom7(0,browz,fpdv,subsample);
di1_lite = deid_dicomhdr(di1);
rawimgstruc = z;
x = getsafield(z,'idata');

%mx = max(max(max(max(x))));
xx = zeros(dim1,dim2,dim3,4);
% Start 20141110 ...
imgtyp = getsafield(z,'imgtyp');
imgtyp1 = imgtyp(1,:);
ltyp = length(imgtyp1);
itypes = zeros(4,1); % Confirm these image types included, and put in this defined order:
for ityp = 1:ltyp
    if(imgtyp1(1,ityp) == 8)        % "8"   = "Water-only"
        itypes(1) = ityp;
        %xx(:,:,:,1) = x(:,:,:,ityp);        
        junk = squeeze(x(:,:,:,ityp));
        maxjunk = max(max(max(junk)));
        %clip3(junk,0,maxjunk,0);
        xx(:,:,:,1) = clip3(junk,0,maxjunk,0); % Gets rid of negative pixels.
    elseif(imgtyp1(1,ityp) == 11)   % "11"  = "Fat-only"
        itypes(2) = ityp;
        %xx(:,:,:,2) = x(:,:,:,ityp);
        junk = squeeze(x(:,:,:,ityp));
        maxjunk = max(max(max(junk)));
        %clip3(junk,0,maxjunk,0);
        xx(:,:,:,2) = clip3(junk,0,maxjunk,0); % Gets rid of negative pixels.
    elseif(imgtyp1(1,ityp) == 17)   % "17"  = "FatFraction"
        itypes(3) = ityp;
        %xx(:,:,:,3) = x(:,:,:,ityp);
        junk = squeeze(x(:,:,:,ityp));
        maxjunk = max(max(max(junk)));
        %clip3(junk,0,maxjunk,0);
        xx(:,:,:,3) = clip3(junk,0,maxjunk,0); % Gets rid of negative pixels.
    elseif(imgtyp1(1,ityp) == 18)   % "18"  = "T2*"
        itypes(4) = ityp;
        %xx(:,:,:,4) = x(:,:,:,ityp);
        junk = squeeze(x(:,:,:,ityp));
        maxjunk = max(max(max(junk)));
        %clip3(junk,0,maxjunk,0);
        xx(:,:,:,4) = clip3(junk,0,maxjunk,0); % Gets rid of negative pixels.
    end % if imgtyp1
end % for ityp

if (make_exam_folder == 'y')
    % Create output directory (if needed) and move in to it.
    filelist = dir; % Return structure of file/directory names in current directory.
    [nfiles junk] = size(filelist);

    dircase = 'makeit'; % Default case is to make examID directory for data output.
    if (nfiles > 2) % 'dir' returns at least 2x1 struct for directories '.' and '..'
        for ifiles=3:nfiles
            if ( strcmp(filelist(ifiles).name, examID) == 1 ) % Target name exist, but is it a file or dir?
                if (filelist(ifiles).isdir == 1) % It exists and is a directory.
                    dircase = 'move2it';
                else % Then it's a FILE by SAME NAME. Dont overwite file just in case its important.
                    disp('WARNING!!! FILE by same name. Creating "NEW"examID DIRECTORY. RESOLVE CONFLICT LATER. '); 
                    dircase = 'makeitNEW';
                end % if filelist(ifiles).isdir
            end % if strcmp(filelist(ifiles).name, examID)
        end % for ifiles
    end % if nfiles

    switch dircase
        case 'makeit'
            mkdir(examID);
            cd(examID);
        case 'makeitNEW'
            mkdir(['NEW' examID]); % Need to create a different directory 'NEWexamID'
            cd(['NEW' examID]);
        otherwise % Same as 'move2it' case.
            cd(examID);
    end % switch dircase
end % if make_exam_folder

outfn = [subjid dtes 'QDixon.fld'];
outfnbinary = [subjid dtes];

if (save_avs == 'y')
    
    clear x; % Discovered x may have more than W,F,T2_Star & FF so clear x first, then repopulate.
    x = 0.*xx;
    maxx = max(max(max(max(xx(:,:,:,1:2)))));
    x(:,:,:,1:2) = maxscale * xx(:,:,:,1:2) / maxx;
    x(:,:,:,3) = fatscale * xx(:,:,:,3);
    x(:,:,:,4) = t2sscale * xx(:,:,:,4);


    veclen = 4;

    fov = max(fov1,fov2);
    %fovz = (dim3-1)*slthk;
    fovz = fov3;
    min_ext = [0.0 0.0 0.0];
    max_ext = [fov fov fovz];

    datatyp = 'short'; % For input
    datatypo = 'short';% For output

    nslc = dim3;

%     outfn = [subjid dtes 'QDixon.fld'];
%     outfnbinary = [subjid dtes];
    qimgs = permute(x,[2 1 3 4]); % eg this puts max w,f,op,ip at 500 and max %fat at 100 in AVS flds.


    % ***************************
    % Finally, output results:
    % ***************************

    % Setup to create AVS header:
    mn_val = round(squeeze(min(min(min(qimgs)))));
    min_val = mn_val';
    %size(min_val)

    mx_val = round(squeeze(max(max(max(qimgs)))));
    max_val = mx_val';

    [dm1 dm2 dm3 dm4] = size(qimgs);
    if (dm4 == 1)
        dataout = round(qimgs);
    else
        dataout = round(permute(qimgs,[4 1 2 3 ])); % Lets Vector work in AVS.
        %size(dataout)
    end % if dm4
    %dataout = round(squeeze(qimgs(:,:,:,1)));



    veclabel = char('label= "WaterOnly" "FatOnly" "PctFat" "T2Star" ');
    ndim = 3;


    % The script write3Davshdr writes-out AVS header and returns offset to start writing data.
    byteoff = write3Davsrecthdr(outfn,ndim,veclen,dim1,dim2,dim3,veclabel,min_ext,max_ext,min_val,max_val);

    fido = fopen(outfn,'r+','b'); % **** TLC feb19 2001, had to try non-b io to get AVS to correctly geom viewer win2k-produced fields.
    %fido = fopen(outfn,'r+'); % *** TLC, feb19 2001, no still worse without 'b' on this command.
    status = fseek(fido,byteoff,'bof'); % Pos byte offset from bof
       if (status == -1) input('Error in moving to start of data');
            ferror(fido)
            % break;
            return; % REV 13
       end
    count = fwrite(fido,dataout,datatypo);

    % Setup points array for rectilinear field.
    dims = [dim1 dim2 dim3];
    del_ext = (double(max_ext) - double(min_ext)) ./ double(dims);
    xxx = min_ext(1) + del_ext(1)*((1:dim1) - 1);
    yyy = min_ext(2) + del_ext(2)*((1:dim2) - 1);
    zzz = min_ext(3) + del_ext(3)*((1:dim3) - 1);
    xyz = [xxx yyy zzz];

    count = fwrite(fido,xyz,'float');

    status = fclose(fido);
end % if save_avs


if (save_mat == 'y')
    save(outfnbinary,'rawimgstruc','xx','maxscale','fatscale','t2sscale','fpdv','nifti_params','di1_lite');
end % if save_mat


if (save_nifti == 'y')
% Let's auto-make niftis:
    build_nii(squeeze(xx(:,:,:,1)), nifti_params, [subjid '_WATER_']);
    build_nii(squeeze(xx(:,:,:,2)), nifti_params, [subjid '_FAT_']);
    build_nii(squeeze(xx(:,:,:,3)), nifti_params, [subjid '_PCTFAT_']);
    build_nii(squeeze(xx(:,:,:,4)), nifti_params, [subjid '_T2STAR_']);
end

if (save_mhd == 'y')
    volabels = {'WaterOnly', 'FatOnly', 'PctFat', 'T2Star'}; 
    mhdinpar = mk_mhd_inpars(nifti_params, subjid, 's', 'n', volabels);
    mhdinpar.sidsls = 'n'; % do not look at middle slice
    build_mhd_v5(xx(:,:,:,1:4),mhdinpar); % 20150831 MD : un-squeezed images
    % [ output_args ] = build_mhd_v4(imdat,nifti_params,fileprefix,voln,browz,nvect,externalcomment)
%     build_mhd_v4(squeeze(xx(:,:,:,1)),nifti_params,subjid,'WaterOnly',1,'n','WaterOnly');
%     build_mhd_v4(squeeze(xx(:,:,:,2)),nifti_params,subjid,'FatOnly',1,'n','FatOnly');
%     build_mhd_v4(squeeze(xx(:,:,:,3)),nifti_params,subjid,'PctFat',1,'n','PctFat');
%     build_mhd_v4(squeeze(xx(:,:,:,4)),nifti_params,subjid,'T2Star',1,'n','T2Star');
end


if (make_exam_folder == 'y')
    cd ..
    disp ('Moved back to starting directory ..., Done with dixon_Qfat ');
else
    disp ('Done with dixon_Qfat ');
end % if make_exam_folder


