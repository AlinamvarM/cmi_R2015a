function V = transformMesh(V,tpname)

[tdir,tname] = fileparts(tpname);
if isempty(tdir)
    error('Input transform parameter file with full directory path.');
end

nv = size(fv.vertices,1);

% Put points in original real space:
n = cross(fv.direction(1:3),fv.direction(4:6));
M = [reshape(fv.direction,3,2),n',fv.origin';zeros(1,3),1];
moff = 
V = M * [ fv.vertices' ; ones(1,nv) ];

% Save points:
fprintf('Saving mesh points ...\n');
ptsname = fullfile(tdir,'inputPoints.txt');
fid = fopen(ptsname,'w');
fprintf(fid,'point\n%u\n',nv);
for i = 1:nv
    fprintf(fid,'%f %f %f\n',V(1:3,i));
end
fclose(fid);

% Generate call to transformix:
str = sprintf('cd %s ; /usr/local/bin/transformix -out ./ -tp ./%s.txt -def inputPoints.txt',tdir,tname);
[stat,cmdout] = system(str,'-echo');
if stat
    error(cmdout);
end

% Load transformed points:
fv.vertices_orig = fv.vertices;
opstr = fullfile(tdir,'outputpoints.txt');
if exist(opstr,'file')
    fprintf('Loading transformed points ...\n');
    fid = fopen(opstr,'r');
    str = fread(fid,'*char')';
    fclose(fid);
    stro = regexp(str,'OutputPoint = \[ (\S+) (\S+) (\S+) ]','tokens');
%     stri = regexp(str,'InputPoint = \[ (\S+) (\S+) (\S+) ]','tokens');
    nv = length(stro);
    fv.vertices_orig = fv.vertices;
    for i = 1:nv
        fv.vertices(i,:) = str2double(stro{i});
%         fv.vertices_orig(i,:) = str2double(stri{i});
    end
    % Transform back to matrix space:
    fv.vertices = (M \ [ fv.vertices' ; ones(1,nv) ])';
    fv.vertices(:,4) = [];
else
    error('File outputpoints.txt not found.');
end
