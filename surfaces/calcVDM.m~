function [vdm,h] = calcVDM(segfname,elxdir,dt,cfname)
% [vdm,h] = calcVDM_v1(segfname,elxdir,dt)

h = [];
vdm = [];

if nargin==0
    [fname,fpath] = uigetfile('*.mhd','Select Segmentation:');
    if ischar(fname)
        segfname = fullfile(fpath,fname);
    else
        return;
    end
end
if nargin<2
    elxdir = uigetdir(pwd,'Select Elastix directory:');
    if ~ischar(elxdir)
        return;
    end
end
if nargin<3
    dt = str2double(inputdlg('Scale factor:','VDM Scale',1,{'1'}));
    if isempty(dt)
        return;
    elseif isnan(dt)
        error('Invalid scale factor.');
    end
end
if nargin<4
    [fname,fpath] = uigetfile('*.mhd','Select Centerline Results:');
    if ischar(fname)
        cfname = fullfile(fpath,fname);
    else
        return;
    end
end

units = 'yr';
vdm = struct(...
    'faces',{[]},'vertices',{[]},... % For plotting VDM
    'vertices_orig',{[]},...         % Vertices at baseline
    'map',{struct('method',{'dJ/dt','dSA/dt','GC','MC'},...
                  'label',{sprintf('$$\\dot{J}(/%s)$$',units),...
                           '$${\dot{A}(\%/yr)}$$',...
                           '$${GC}$$',...
                           '$${MC}$$'},...
                  'clim',{exp([-1,1]),[-100,100],[-0.1,0.1],[-0.3,0.3]},...
                  'logdisp',{true,false,false,false},...
                  'vals',{[],[],[],[]})},...
    'segfname',{segfname},...
    'elxdir',{elxdir},...
    'cfname',{cfname},...
    'scale',{dt},...
    'units',{units});

vdmfname = fullfile(elxdir,'vdm.mat');

% Find transform parameter file:
parname = dir(fullfile(elxdir,'TransformParameters.*.txt'));
ind = max(cellfun(@(x)str2double(x(21)),{parname(:).name}));
parname = sprintf('TransformParameters.%u.txt',ind);

% Find Jacobian rate:
JRfname = fullfile(elxdir,'spatialJacobianRate.mhd');
if exist(JRfname,'file')
    
else
end


Dname = fullfile(elxdir,'deformationField.mhd');
if ~exist(Dname,'file')
    fprintf('Generating deformation fields...\n');
    str = sprintf('cd %s ; /usr/local/bin/transformix -out ./ -tp ./%s -def all',elxdir,parname);
    [stat,cmdout] = system(str,'-echo');
    if stat
        error(cmdout);
    end
end

% Read segmentation:
if exist(segfname,'file')
    [mask,~,fov,info] = readMHD(segfname);
    d = size(mask);
    voxsz = fov./d;
else
    error('Could not find segmenation file: %s\n',segfname);
end
% Matrix space to real space:
vdm.direction = info.SliceOrient;
vdm.origin = info.SlicePos;
n = cross(vdm.direction(1:3),vdm.direction(4:6));
M = [ reshape(vdm.direction,3,2),n',vdm.origin' ; zeros(1,3),1];

fprintf('Generating and transforming surface mesh ...\n');
[fv,x,y,z] = mask2surf(mask,voxsz);
nv = size(fv.vertices,1);
vdm.vertices_orig = (M * [fv.vertices' ; ones(1,nv)])';
vdm.vertices_orig(:,4) = [];
vdm.faces = fv.faces;
vdm.vertices = transformMesh(vdm.vertices_orig,fullfile(elxdir,parname));

% Calculate VDM surface values:
fprintf('Reading deformation fields ...\n');
dX = readMHD(Dname);
fprintf('Calculating spatial Jacobian ...\n');
F = surfVal(def2jac(dX,voxsz),x,y,z,fv.vertices);
fprintf('Calculating spatial rate Jacobian ...\n');
FF = surfVal(def2jac(dX/dt,voxsz),x,y,z,fv.vertices);
vdm.map(1).vals = zeros(nv,1);
f = zeros(3); % J
ff = zeros(3);% dJ/dt
gi = mod(1:nv,round(nv/20))==0;
fprintf('Calculating Jacobian determinant rate ...\n');
for i = 1:nv
    f(:) = F(i,:);
    ff(:) = FF(i,:);
    vdm.map(1).vals(i) = det(f) * trace( f \ ff )/3;
    if gi(i)
        fprintf('%u%% Complete\n',sum(gi(1:i))*5);
    end
end

% Load Centerline results:
lineData = importCenterline(cfname);
vdm.centerLine = lineData;
vdm.centerLine.tP = transformMesh([lineData.Px,lineData.Py,lineData.Pz],fullfile(elxdir,parname));

% Save results:
save(vdmfname,'-struct','vdm');

% Display VDM and save JPEG:
dispmap = 1; % Display Jacobian determinant rate
[~,edirname] = fileparts(elxdir);
edirname = edirname(8:end);
h = [];
nf = length(vdm.faces);
nv = length(vdm.vertices);
V = vdm.map(dispmap).vals;
if vdm.map(dispmap).logdisp
    V = real(log(V));
end
nc = length(V);
clim = vdm.map(dispmap).clim;
if isempty(clim)
    clim = prctile(cdata,[5,95]);
end
if nc == nf
    opts = {'Facecolor','flat'};
elseif nc == nv
    opts = {'Facecolor','interp'};
else
    error('Invalid CData input length.');
end
opts = [opts,{'EdgeColor','none',...
              'FaceLighting','gouraud',...'FaceAlpha',0.5,...
              'AmbientStrength',0.5,...
              'DiffuseStrength',0.5,...
              'SpecularStrength',0.3,...
              'SpecularExponent',50,...
              'BackFaceLighting','reverselit'}];
h.fig = figure('Colormap',jet(128),'Position',[500 500 600 800],'Units','normalized');
h.axes = axes(h.fig,'Position',[0 0 1 1],'CLim',clim); 
h.patch = patch(h.axes,'Faces',vdm.faces,'Vertices',vdm.vertices,'FaceVertexCData',V,opts{:});
axis(h.axes,'equal','off','tight');
view(h.axes,-90,0);
h.light = camlight(50,30);
if vdm.map(dispmap).logdisp
    caxis(h.axes,log(clim));
end
h.cbar = colorbar(h.axes,'FontSize',20,'AxisLocation','in',...
        'Position',[ 0.95 , 0.2 , 0.025 , 0.6 ]);
yt = round(linspace(clim(1),clim(2),6),2);
if vdm.map(dispmap).logdisp
    h.cbar.YTick = log(yt);
    h.cbar.YTickLabel = yt;
else
    h.cbar.YTick = yt;
end
title(h.cbar,['\fontsize{30}{0}\selectfont',vdm.map(dispmap).label],'Interpreter','latex',...
    'Units','normalized','Position',[0.5,1.2,0],'HorizontalAlignment','right');
% Plot centerline:
h.axes(2) = axes(h.fig,'Position',[0,0,1,1]);
plot3(h.axes(2),vdm.centerLine.tP(:,1),vdm.centerLine.tP(:,2),vdm.centerLine.tP(:,3),'r');
axis(h.axes(2),'off','equal');
view(h.axes(2),-90,0)
h.axes(2).XLim = h.axes(1).XLim;
h.axes(2).YLim = h.axes(1).YLim;
h.axes(2).ZLim = h.axes(1).ZLim;
hr = rotate3d(h.fig);
% set(hr,'ActionPostCallback',{@(~,~,x)camlight(x,50,30),h.light});
set(hr,'ActionPostCallback',{@rotCallback,h});

savefig(h.fig,fullfile(elxdir,[edirname,'.fig']));
saveas(h.fig,fullfile(elxdir,[edirname,'.jpg']));

% Plot centerline results:
y = surf2centerline(vdm.faces,vdm.vertices,vdm.map(dispmap).vals,...
    vdm.centerLine.tP,[vdm.centerLine.Tx,vdm.centerLine.Ty,vdm.centerLine.Tz]);
x = cumsum([0;sqrt(sum(diff(centerLine.tP,1).^2,2))]);
figure,plot(x,y);ha = gca;
title(ha,'Mean surface value along centerline','FontSize',20);
ylim(ha,vdm.map(dispmap).clim);
xlabel(ha,'Location Along Aorta (mm)');
ylabel(ha,['\fontsize{12}{0}\selectfont',vdm.map(dispmap).label],'Interpreter','latex')

function V = surfVal(M,x,y,z,p)
nv = size(M,4);
V = zeros(size(p,1),nv);
for i = 1:nv
    V(:,i) = interp3(y,x,z,M(:,:,:,i),p(:,2),p(:,1),p(:,3));
end

function rotCallback(~,~,h)
% rotCallback(hf,ha,h)
[az,el] = view(h.axes(2));
view(h.axes(1),az,el);
camlight(h.light,50,30);
